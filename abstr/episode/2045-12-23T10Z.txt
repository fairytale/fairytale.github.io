# -*- mode: org -*-
#+TITLE: Sphiya's Last Theorem
#+DATE: 2046-01-07T11Z
#+AUTHOR: Alice M. Lorenz

* Abstract
　冬休みの3日めの夜。しんしんと降り続ける粉雪で、道路が粉砂糖をかけたココアケーキみたい。イルミネーションで豪勢に飾られたクリスマスツリーのために道路は昼間のように明るい。
　仕事で疲れた社会人や勉強をこなした学生が、みんな、帰りの電車に乗るために京都駅へ吸い込まれるような流れをつくっている。
　そんななか、わたしは、京都駅から離れるように、人の流れに逆らうようにして歩いている。
　目的地は京都λ抽象学院だ。
　なぜ、ほかのだれかではなく、よりにもよってこのわたしが冬休みの3日めに学校へ出向くのかというと、学校のわたしの住んでいる寮に設置されたサーバに、昨日の昼頃、何者かが不正にログインし、Facebook Searchという検索エンジンのTCPパケットを改竄してsearch.facebook.comドメイン以下のすべてのページにマルウェアへのリンクを張ったからだ。
　でも、たしかsearch.facebook.comはGGH暗号で暗号化されていたはず。
　GGH暗号というのは、格子暗号のひとつ。格子暗号というのは、古典的な公開鍵暗号や楕円曲線暗号よりも安全な、耐量子計算機暗号のひとつで、耐量子計算機暗号のうちではもっとも主流のもの。
　耐量子計算機暗号を解読しなければ、TCPパケットの改竄はできない。
　search.facebook.comのTCPパケットを改竄するなんてこと、可能なのだろうか。
　ともあれ、京都λ抽象学院のルータを通して通信していたたくさんの〈マシン〉がそのマルウェアに感染したことは事実としてあるらしく、今日の午後それが発覚して、まず最初に疑われたのが、その寮に住んでいる、わたしと、ソフィーヤと、真鳥の3人だったわけだ。
　耐量子計算機暗号で暗号化されたsearch.facebook.comが改竄されたということは、犯人は耐量子計算機暗号を解読してしまうほどの技術力を持った人物ということになる。
　わたしと、ソフィーヤと、真鳥のうちで、そんなことができる技術力を持っているとすればソフィーヤだけだ——彼女は天才だ——けど、ソフィーヤはわたしの親友だし、そんな悪いことをするはずがない。
　それに、動機だってないだろうし。
　それでも、わたしたちは疑われている。身の潔白を主張するため、わたしは、いま京都λ抽象学院へ向かっている。
* Introduction
　2045年12月23日土曜日午後7時前。わたしは京都駅からバス停へ向かっている。
　バス停でソフィーヤが待っていた。彼女はロシア人だから寒さには強いと思ってたけど普通に厚着をしていた。
　わたしはカーディガンのポケットに両手を突っ込み、震えながら彼女を見上げてたずねる。
「ロシア人はこの時期でも薄着かと思ってたけど」
　ソフィーヤは表情を変えず冷静に答える。
「アリス、ロシアはシベリアじゃない……モスクワの気温は……たぶんザールラントと変わらない」
　アリスことわたしはドイツのザールラント出身。ソフィーヤはロシアのモスクワ出身。ふたりとも留学生。
　わたしとソフィーヤは京都府に住んでいるから待ち合わせられたけど、真鳥は兵庫県に住んでいるから時間がかかる。
　それにしても、こんな時間に兵庫県から呼び寄せるなんて、後藤先生も鬼畜だと思う。
　わたしはぼそっとつぶやく。
「真鳥はたいへんねぇ……ひょっとして今日は帰れないんじゃないかしら」
　ちらっとソフィーヤの顔を見ると、彼女の〈眼鏡〉にはメールが表示されていた。彼女はメールを読みながら冷徹にも答える。
「寮があるから平気だと思う」
　バスが来たので、わたしとソフィーヤはバスに乗る。
　ソフィーヤは無言でなにかメールをしているみたい。
　わたしは唇を尖らせてそっぽを向いてたずねる。
「なに読んでるの」
　一緒にいるときにメールを読まれてると、なんだか無視されてるみたいで。
　ソフィーヤは答える。
「後藤先生に質問してる……というのも……どこまでわかってるのか……掴んでおきたいから」
「サーバに侵入した犯人のこと？」
「そう……」
「ふん。悪いのは学院よ。セキュリティを怠ったのが悪いのよ」
「学院のセキュリティは……かなりしっかりしてると思うけど……」
「思う？　現在形？　わたしたち、意見が合うのね、わたしも思っていたわよ——過去形であることに注意ね！——侵入された事実はないわ、フィクションよ！　そうに違いないわ」
「……そうじゃないと思う……問題があったのは学院じゃなくて……むしろ生徒……」
「あらそう。なにか心当たりでも？」
　ソフィーヤは黙って目をうろうろさせ、うつむいてしまう。
　わたしはびっくりして思わずたずねる。
「……ほんとにあるの？」
「わたし……一昨日……サーバにログインしてた……リモートで……SSHで……」
　わたしは耳を疑う。ソフィーヤが？　サーバに？　ログイン？　リモートで？　SSHで？
　……量子コンピュータは市販されている。だから、SSHの基盤になっているRSA暗号はすぐに解読されてしまう。まだGGH暗号に対応していないSSHはほとんど信用ならない、ログインするならLANでのみ、そう授業で習ったはず。
　SSHでリモート・ログインすると、TCPセッション・ハイジャックされる可能性がある。だから、SSHでリモート・ログインすることは危険なので校則で禁止されてる。
　でも、リモート・ログインは便利だから、ついつい使ってしまう。盗聴される危険性があるのもわかるけど、きっと、わたしだけは大丈夫だろう、そんな気持ちでみんな使ってしまうんだ。
　わたしは確認する。
「ほんとなの……？」
　ソフィーヤはうなずく。
　鳥肌が立つ。緊張する。
　つまり、その、本当に原因はソフィーヤで、秘密鍵が解読されて、パスワードが盗まれたってこと？
　もちろん犯人は別にいるとはいえ、そんな事実が発覚したら、ソフィーヤはどうなるか。退学？　よくて停学？　サーバは処分されるかも。同じ寮のわたしたちは？　どうなるかわからない。
　これから先の学校生活が破壊される。
　こわい。
　わたしは指をこねくり合わせて目を逸らし、たずねる。
「どっ、どうしてサーバにリモート・ログインしたのかしら」
「それはその……とあるファイルをサーバから〈マシン〉にコピーし忘れてたから……」
　とあるファイルがなんであるかは、たずねないほうがいいだろう。
　わたしはしどろもどろで言う。
「そう、残念、だわ……」
　バスが荒神口通りに着く。
　わたしとソフィーヤはそこで降りて、学校まで歩く。
　夜中の学校の、職員室の窓だけが光っている。
　わたしは門でインターホンを押す。
　インターホンのディスプレイに後藤先生の顔が写り、彼女はおごそかに言う。
「いま、鍵を開けました。どうぞ入ってください」
　わたしとソフィーヤは学校のなかに入り、職員室へ向かう。
　職員室の扉を開けると、温暖な空気が漏れ出てきて、なかに入ると、眼鏡があっという間に曇る。
　わたしとソフィーヤは眼鏡を一度外し、結露を拭いてから再度身に付ける。
　わたしたちは、目が悪いから眼鏡をしているわけではなくて、この眼鏡はポケットにいれた〈マシン〉のディスプレイになっているのだ。
　また、表示できる情報は〈マシン〉のものだけではなく、情報にアクセスさえできれば、パソコンのディスプレイのようになんでも表示できる。
　ただ、冬は暖かい部屋に入るとすぐ曇ってしまうのが難点だ。
　ところで、〈マシン〉というのは、いまの時代ならだいたいひとりひとつは持っている、ポケットに入るくらいの小型デバイスのことだ。
　〈マシン〉にも種類はあるけど、たいていのスペックは128ビットCPUか256ビットCPUで、メインメモリは512GB程度。マシンにはそれぞれIPv6によってグローバルIPアドレスが振られている。OSはLinuxディストリビューションのいずれかであることが多い。最近は16キュービットCPUや32キュービットCPUを積んだ〈量子マシン〉もあるらしいけど、わたしは持っていない。
　〈指輪〉で入力し、〈マシン〉が計算し、〈眼鏡〉が表示し、〈イヤホン〉が鳴らし、〈嗅覚シール〉がにおわせてくれて、〈味覚入れ歯〉があじあわせてくれる。
　これは、いまさら説明するまでもないような、当たり前のことだけど。
　ところで、職員室には後藤先生——わたしたちの担任——以外の先生はいない。
　わたしたちは後藤先生の机まで行く。
　後藤先生はしかめっ面で椅子に座っている。
　後藤先生がふだん通りの優しい口調で言う。
「どうぞ、空いている席はたくさんあります。お座りください」
　ソフィーヤは黙って言うとおりに座る。
　わたしはある椅子に座る前に高さを調節してから——つまり、悔しいけど座席部分を可能な限り高くしてから——その椅子に座る。それでもやや低過ぎる気がして悔しい。
　ソフィーヤがわたしを気遣ってくれたのか、何気なく言う。
「なんなら……わたしの膝の上に座っても……」
　わたしは顔が真っ赤になる気がした。そういうことはその、ふたりきりのときなら嬉しいけど、いまは後藤先生の前だし……。わたしはそっぽを向いて抗議する。
　後藤先生の〈眼鏡〉にウィンドウが表示されている。どうやらメールしているみたいだ。
　後藤先生は左手の小指でたんと机を叩くような仕草をする。〈指輪〉——ブレイン・マシン・インターフェイスの一種で、指の神経への電気信号を理解し、空中でも机でもどこでも、タップすることでクリックやダブルクリックができて、指で空をなぞることでマウスポインタを動かせる、マウスに代わる入力デバイス——を操作しているのだ。その操作で、彼女は眼鏡に表示されたウィンドウを閉じ、言う。
「真鳥さんはあと17分ほどで到着するようです。真鳥さんが来てからまた話すことになるのは時間のムダですし、詳しい話は彼女が到着してからにしましょう」
　ソフィーヤが即座に答える。
「賛成……です……」
　わたしは質問する。
「それまではどうします？」
「そうですね……では、いくつか出題します——今回の件にも関係のあることです——あなたたちが授業で習ったことをしっかり身につけられているかどうか、抜き打ちテストです」
　ソフィーヤは眉ひとつ動かさないけど、わたしは心のなかで思わず（ヒーッ）と叫んでいたし、たぶん顔にも出ていたと思うと、恥ずかしくなる。
　後藤先生はにっこり笑う。
「答えられなくてもかまいませんよ。公式な問題ではないし、成績には影響しませんので」
　わたしは冷や汗をかく。答えられる自信はほとんどない。
「それでは最初の問題です」と、後藤先生が切り出すけど、「あっと、えっと、その前に……前提を共有しましょう。一昨日——12月21日、冬休み初日ですね——、ソフィーヤさんは、自宅からSSHで件のサーバにリモート・ログインした。これは本人の証言です。これはあとで真鳥さんにも話すつもりですが、アリスさんは、この事実をご存知ですか？」
「はい、道中、ソフィーヤから聞きました」
「ここから出題。まず、SSHはリモート・サーバと安全に通信をするためのプロトコルです。SSHにおける通信の安全は、公開鍵暗号と共通鍵暗号という暗号技術によって担保されています。ここで、共通鍵暗号とはどのような暗号技術か、簡潔に答えなさい」
　選択問題じゃない！　選択なら消去法とかいろいろ解き方の定石があるのに。こういう問題は苦手だ。
　そう思っていると、ソフィーヤがすらすらと答える。
「共通鍵暗号は……サーバとクライアントで……同じ鍵を使って暗号化をする方式です……。共通鍵では……同じ鍵で暗号化したものを……同じ鍵で復号します……。鍵は……あらかじめサーバとクライアントに同じものを用意しておくか……通信する直前に一度だけつくって共有するなどの方法で用意されます。そして……同じ鍵を用意したうえで……その鍵で暗号化したデータを送信し……受信したデータをその鍵で復号するようにして……通信の安全を担保します……」
「よろしい。この方式では、鍵が漏れず、アルゴリズムに脆弱性がないかぎりは、基本的に絶対安全と言えます。ところが、共通鍵暗号には、ひとつ重大な問題があります。それはなんでしょう」
　これはわかる！　わたしは手をあげて元気よく答える。
「はいはい！　わたしが答えます。共通鍵暗号は、鍵で暗号化したデータは安全に通信できますが、鍵そのものをどうやって通信するのかという問題があります」
「正解。つまり、もし攻撃者に鍵の通信そのものが盗聴されてしまった場合、ほかの通信も攻撃者に復号されてしまうということですね。ところで、この問題をきれいとは言えないまでも現実的に解決する方法が公開鍵暗号です。共通鍵暗号が、鍵をひとつしか用意しないのに対して、公開鍵暗号は、鍵のペアを用意します。その鍵をそれぞれなんと言うでしょうか」
　これもわかる。わたしは続けて答える。
「公開鍵と、秘密鍵です」
「正解。ところで、この鍵のペアにはある性質があります。ここで、
1) 公開鍵で暗号化したものは、どの鍵で復号できるでしょうか。
2) 秘密鍵で暗号化したものは、どの鍵で復号できるでしょうか」
　ちょっとばかにされてるのかとも思うくらい簡単な問題。わたしは答える。
「公開鍵で暗号化したものは、秘密鍵で復号できます。秘密鍵で暗号化したものは、公開鍵で復号できます」
　ソフィーヤが落ち着いて付け加える。
「いまの言い方だと……公開鍵で暗号化したものを復号できるのは秘密鍵だけではないようにも聞こえるけど……実際には……公開鍵で暗号化したものが復号されるのは秘密鍵を使ったとき、またそのときにかぎる……秘密鍵で暗号化したものについても同様」
　わたしは顔を真っ赤にして抗議する。
「わっ、わかってるわよ、それくらい。言わなくてもわかるでしょ」
　ソフィーヤは細い目でわたしを見て言う。
「事例は……ちゃんと列挙しないと……勘違いする人が……いるかも」
　後藤先生が続ける。
「次の問題。共通鍵暗号では、鍵の送受信が盗聴者に知られると、通信が復号される可能性がありました。ところで、公開鍵暗号は鍵の送受信はするものの、鍵が盗聴者に知られても、通信は復号されない仕組みになっています。それは、どのような仕組みか。簡潔に答えなさい」
　そんなの、わからない。
　わたしが目をまわしていると、ソフィーヤが答える。
「“公開鍵で暗号化したものを復号できるのは、秘密鍵だけ”という性質を利用します……。サーバとクライアントで……それぞれ公開鍵と秘密鍵のペアをひとつずつ生成し……公開鍵だけを交換します——このとき、公開鍵は攻撃者に盗聴される危険性があるけど、秘密鍵は攻撃者に盗聴される危険性はないということに注意してください——ここで……データを公開鍵で暗号化して送信すれば……“公開鍵で暗号化したものを復号できるのは、秘密鍵だけ”なのですから……攻撃者は秘密鍵を知らないのですから……安全というわけです」
「正しい。次の問題。ところで、SSHは安全にリモート・サーバと通信するためのプロトコルです。SSHでサーバとクライアントが通信するとき、SSHは、
- サーバ認証……サーバがハイジャックされていないかの確認
- ユーザ認証……ユーザがハイジャックされていないかの確認
- 共通鍵暗号による通信の暗号化
- 公開鍵暗号による共通鍵暗号の鍵の暗号化
などをして、通信の安全性を保証してくれます。サーバとクライアントは、それぞれ公開鍵と秘密鍵のペアを生成して、かつ、あらかじめ公開鍵は交換しておいたものとして——この公開鍵の交換は盗聴されても問題はありません——SSHがおこなう手順は、簡単には、
1) クライアントは、ホスト公開鍵で、ランダムなデータを暗号化してサーバに送信し、
2) サーバは、そのデータをホスト秘密鍵で復号してクライアントに送り返し、
3) クライアントは、送り返されたデータと、送ったはずのデータが一致するか確かめて——公開鍵で暗号化したものを復号できるのは秘密鍵の所有者だけなので、一致すればサーバがハイジャックされていないと確信できるわけです——
4) クライアントは、共通鍵の鍵をつくり、それをホスト公開鍵で暗号化してサーバに送信し——この鍵は、やはり公開鍵で暗号化されているので、秘密鍵の所有者しか復号できず、通信は安全です——
5) サーバは、クライアント公開鍵で、ランダムなデータを暗号化してクライアントに送信し、
6) クライアントは、そのデータをクライアント秘密鍵で復号してサーバに送り返し、
7) サーバは、送り返されたデータと、送ったはずのデータが一致するか確かめて——公開鍵で暗号化したものを復号できるのは秘密鍵の所有者だけなので、一致すればクライアントがハイジャックされていないと確信できるわけです——
8) 晴れてクライアント認証とサーバ認証が完了したので、手順4でつくった共通鍵の鍵で通信を暗号化する
という手順を踏むのですが——すいません、簡単にはと言いつつ、ややこしく、複雑でした——要は、公開鍵暗号で鍵を暗号化して交換し、その鍵で通信を暗号化することで安全に通信します。これを前提として、いくつか出題します。まず、このとき、公開鍵暗号としては、たいていRSA暗号が使われます。ここで、RSA暗号はどのような公開鍵暗号か、簡潔に答えなさい」
　ソフィーヤがまるで教科書を暗記しているかのようにすらすらと答える。
「RSA暗号は……代表的な公開鍵暗号で……素数と素数を掛け合わせて合成数を求めるのは簡単だけど……合成数を素因数分解して素数と素数を求めることは難しいことを根拠としています……たとえば、2048ビット長のRSA暗号を素因数分解で解読するには……3×10^{20}年の時間が必要とも言われていました……無条件安全性はありませんか……計算量的安全性はあるというやつです……」
「正しい。もっとも、その時間は古典コンピュータの進化とともに短くなっていきます。ところで、無条件安全性と計算量的安全性とはなにか。簡潔に説明せよ」
　これはわかる。わたしは説明する。
「無条件安全性というのは、解読が不可能という意味です。鍵の長さが送信するデータと同じかそれ以上の長さであれば、無条件に安全です。計算量的安全性とは、解読は可能だけど、古典コンピュータでは解読するのに非現実的なほど長い時間がかかることです。同じアルゴリズムでも、単純に鍵の長さを長くすることで、計算量的に安全になる可能性があります」
「そう。20年から30年前の古典コンピュータの時代では、RSA暗号はとても頑丈な、計算量的に安全な暗号でした。ところが、RSA暗号の脅威となる技術が現れました。つまり、ある技術を使うと、RSA暗号の鍵をいくら長くしようとほぼ定数時間で解読してしまう技術が現れました。それはなにか」
　わたしは授業で習った記憶を引っ掻き回す。たしか、量子コンピュータでショアのアルゴリズムがなんとかとか……。
　そうこう考えているうちに、ソフィーヤが答えてしまう。
「……量子コンピュータ」
「そう。量子コンピュータで、あるアルゴリズムを走らせると、素因数分解を高速に——たとえば2048ビット長のRSA暗号をものの数秒で——処理できます。そのアルゴリズムとはなにか」
　わたしは即答する。
「ショアのアルゴリズム」
「そう。するとどうなったか。RSA暗号は安全とは言えなくなってしまいました。なぜなら、もともとRSA暗号が安全な根拠は、大きな整数の素因数分解に3×10^{20}年かかるからであって、暗号化が絶対不可能というわけではなかったのに、それがものの数秒で解けるようになってしまったからです。ところで、RSA暗号は、SSHの根幹となる暗号です。当然、SSHも、この影響を受けます。SSHのどの手順がこの影響を受けるのか答えなさい」
　ソフィーヤがつまらなそうに答える。
「……ユーザの認証と……サーバの認証と……共通鍵の暗号化の部分です……2048ビットのRSA暗号が主流なので——それがssh-keygenでつくられる鍵のデフォルトの形式だからです——それらの部分が、もはや安全ではないというか、危険です……」
「正しい。では、どのように影響を受けるのか答えなさい」
　ソフィーヤが続けて答える。
「たとえば……まず……攻撃者はホストの公開鍵を入手します……どうやってホストの公開鍵を入手するのかというと……sshコマンドでホストにアクセスすれば簡単に入手できます……それから……量子コンピュータでホストの公開鍵からホストの秘密鍵を計算します……数分もあれば終わるはずです……秘密鍵がわかれば通信の一部が解読できるようになるので……たとえば、SSHでリモート・ログインするときは、手順の一部にホストの公開鍵で共通鍵の鍵を暗号化するものがありますが……このホストの公開鍵で暗号化された共通鍵をホストの秘密鍵で解読することで……暗号化されたパケットをすべて解読できるようになるので……TCPセッション・ハイジャックができます……」
　TCPセッション・ハイジャック。あるTCPのセッションになりすますパケットを横から送信することで、そのTCPを奪ってしまうこと。
　SSHによるリモート・ログインもTCPセッションのひとつだ。
　リモート・ログイン中のTCPをハイジャックする。
　すると、攻撃者はログイン中のセッションを横取りして、サーバにログインできてしまう。
　それにしても、ソフィーヤはやっぱりすごい。
　理解度が違う。
　わたしが答えられない質問にも、すぐさま答えてしまう。
　ソフィーヤは大人しいけど、すっごく頭がいいってことを再確認した。
　後藤先生はいかめしい顔つきで続ける。声はふんわりしているんだけど、顔はこわい。
「よろしい。ふたりとも、SSHでリモート・ログインすることがいかに危険なのかよくわかっているようですね」
　そのとき、職員室にごーんごーんと鐘の音が鳴る。
　インターホンの音。
　こんな時間に来客は来ない。
　どうやら真鳥が到着したみたいだ。
　後藤先生が席を立ち、受話器をとって言う。
「いま、鍵を開けました。どうぞ入ってください」
　廊下から真鳥が入ってくる。彼女は一気に曇る眼鏡を外すよりも先に、大きく頭を下げて叫ぶ。
「遅れてごめんなさい！　お待たせしました！」
　それから彼女は眼鏡を外し、結露を拭き取りながら、ふらふらと歩いてくる。
　彼女は目がとても悪く、その眼鏡には度が入っている。
　眼鏡を外すと、そのぱっちりしたまつげがよく目立つ。
　危なっかしい歩き方。
　途中、彼女は腰を机にぶつけて、よろめく。
　腰に届きそうなストレートの黒髪がゆらゆら揺れる。
　彼女は眼鏡をつけながら席に座る。
　わたしは真鳥に挨拶する。
「こんばんは、真鳥」
　真鳥は目をうろうろさせながら答える。
「こんばんは……」
　わたしはいきなりジョークを思いついたので言う。
「良い知らせと悪い知らせがあるわ。どっちから聞きたい？」
　真鳥が指で耳を撫でながらたずねてくる。
「良い知らせから？」
「わたしたちのつくったサーバはなんの問題もなく、すべて正常に動作しているわ」
「じゃあ、悪い知らせって？」
「22番ポートもきちんと動いてたってことかしら」
　22番ポートというのは、sshサーバが普通使うポートのこと。
　真鳥の顔が青ざめる。彼女は耳たぶをいじりながら質問してくる。
「ポートは開放していなかったはず」
　そう。sshサーバを動かすならLAN内でだけ。そう授業で習った。
　sshサーバをWAN、つまりインターネットに向けて公開したいときは、ポートを開放する必要がある。
　普通は、危険なのでしない。
　でも、だれかがそれをしてしまった。
　わたしは髪をかきあげて、平静を装いつつ言う。
「それが開放されていたのよ、どういうわけかね」
　そして、それはたぶん、ソフィーヤがやったこと。
　でも、どうして。
　ソフィーヤなら、危険とわかっていたはず。
　なら、なぜ？
　わたしたちの会話に割り込むように、後藤先生がせきをする。
「こほん。みんな集まりましたね。それでは、これから、みんなに集まってもらった理由を説明します。夜も遅いのでさっさと進めましょう。質問などがあればいつでもしてください」
　わたしたちは姿勢を正して聞く。
「まず、状況のまとめから入りましょう。今日の昼頃、何者かがあなたたち3人のサーバに侵入して、ある本校のルータにログインし、TCPパケットを改竄してFacebook Searchのすべてのページにマルウェアへのリンクを張りました。ここまではいいですね」
　ネットワークはルーティングという仕組みによって成り立っている。ルーティングとは、TCPパケットの通り道のことで、通常、複数のルータをたくさん繋げたもの。TCPパケットというのは、ウェブサイトなどの情報を小さな単位に分割したもの。TCPパケットはルータからルータへ、バケツリレーのように転送される。もし、その途中のルータがひとつでも偽のデータを転送してしまったら？　最終的に届くのは改竄されてしまったページ。つまり、そのルータが偽のページを転送したことで、そのルータを通して通信している〈マシン〉がアクセスするページが改竄されてしまったということ。
　ソフィーヤが質問する。
「その……マルウェアとはいったいなんでしょう……いえ一般的な単語の意味ではなく……定冠詞をつけた意味で……」
　後藤先生は答える。
「それが、なんなのかまだよくわかっていないのが現状です。なにしろ、今日の午後発覚したわけですから」
「なるほど……解析は……可能なのでしょうか……」
「もちろん可能でしょうが、なにしろ冬休みでしかも夜も遅いので関係ない人を働かせるのは後ろめたいものがありまして」
　ていうか、わたしたちはいいのか。まあ関係あると言えばあるけど。
　真鳥が質問する。
「あの、TCPパケットの改竄って、そんなに簡単にできるんですか？」
　後藤先生が答える。
「非常に難しいと思われます。わたしも、専門外なのでよくわからないんですが……Facebook SearchはGGH暗号で暗号化されていますが、これはRSA暗号などと違って量子コンピュータでも解読できないはずなので、現在の技術では、理論上不可能なはずです」
　そう。Facebook SearchはGGH暗号で暗号化されている。そして、現在、GGH暗号を解読できる方法は存在しない……はず。
　でも、事実できてしまったのだから、その認識は改めないといけない。
「Facebook Searchはみなさん知ってのとおり世界有数のトラフィックを誇る検索サイトです。犯人の目的は、おそらく大量のトラフィックが集まる場所でマルウェアを配布することで間違ってダウンロード、インストール、そして実行してしまった人の〈マシン〉を汚染することだと考えられます」
　それはわかる。というか、それ以外に考えられないだろう。あくまで確認。
　後藤先生は続ける。
「これが現在わかっていることです。そして、今日あなたたちを呼んだ理由は、ふたつあります。ひとつは、あなたたちの潔白を証明するためにすこし質問させてもらうこと。ふたつめは、件のサーバを検査してもらうことです」
　わたしは質問する。
「検査とは、具体的には」
「まず第一に、sshサーバを停止などして、更なる被害を抑えること。これはわかりますね」
　ソフィーヤが申し訳なさそうに答える。
「はい……」
「第二に、ログなど、犯人に繋がる手がかりがないか調べること。第三に——これはオプショナルとして、可能なら——ログなどの手がかりから犯人を突き止めること」
　真鳥が目を丸くして聞き返す。
「犯人を、わたしたちが捕まえるんですか⁉」
「できなければ諦めてもいいです。でも、それができれば、学院およびソフィーヤさんをはじめあなたたちの名誉が回復します。その功績を、わたしは正式に学校に報告します。できなければ……やはり、この事件を、わたしは正式に学校に報告します。そのあとどういう処分がなされるかは、もはや、わたしの手には負えません」
　わたしはぞくりとする。後藤先生が言っているのは、警告だ。つまり、なんらかの処分を受けたくなければ、犯人を突き止めてみせろと言っているのだ。
　後藤先生がおそろしげに言う。
「冬休みが明けるまでは、報告を保留しておきます。1月7日、日曜日、冬休みの最後の日、わたしはことの経緯とすべての結果を学校に報告します。今日、とりあえずsshサーバが停止したことを確認したら、あとは、わたしは関与しません。わたしは、選択するために必要な知識をきちんと開示したつもりです。あとは、あなたたち次第です」
　わたしたち次第。処分を回避できるかどうかは、わたしたちの行動次第。
　わたしは迷う。今回の件で、いちばん悪い処分を受けるのは、たぶんソフィーヤ、わたしの親友だ。もし、問題を真鳥が起こしたというのなら、わたしは自業自得だと言って、今日はさっさと帰っていただろう。でも、問題を起こしたのはソフィーヤだ。もし、わたしがソフィーヤと無関係な第三者で、この事件をニュースかなにかで知っていたとすれば、わたしはソフィーヤの自業自得だと言っていただろう。でも、あろうことか、焦点は大好きな親友に合っているのだ。
　わたしは、ソフィーヤの助けになってあげたい。
　彼女がどう考えてどういう選択をしたのだとしても、それを支えてあげたい。
　わたしは決意する。
　わたしは立ち上がって、前にどんと踏み出し、叫ぶ。
「ソフィーヤ、真鳥、わたしについてきなさい！　こんな事件を起こした不埒ものを突き止めるのよ」
　ソフィーヤが静かに答える。
「わたしはいいけど……真鳥は……」
　わたしは真鳥をぎらりと睨みつける。
　真鳥はびっくりして素っ頓狂な声をあげる。
「もっ、もちろんっ、わたしも付き合いますよ」
「付、き、合、う？」
「いっ、いえ……言葉を間違えました。後学のために参加させていただきます！」
「よろしい」
　真鳥は耳をいじりながらたずねてくる。
「でも、今日は、その、もう帰らないと……終電が……」
「泊まればいいじゃない、寮があるんだから」
「はっ、はい……」
　こうして、わたしたちはサーバを検査し、メンテし、犯人の痕跡を調査し、また犯人を突き止めるために、冬休みのあいだ、寮に泊まり込むことになったのだ。
* Methods
　2045年12月23日土曜日の午後8時。夜中の学校の廊下は、吐いた息が白くなる程度に冷え込んでいて、暖房が効いていて暖かい職員室からでた直後、温度差でわたしは思わず内股になり、足をかくかくさせた。
　こんな時間にわたしたちを呼び出しておいて、後藤先生は職員室に残って、わたしと、ソフィーヤと、真鳥にサーバを調査させる。ちなみに、ちょっと考えればわかることだけど、なぜインターネットが全盛のこのこの時代に、リモートでサーバを管理するのではなくわざわざ学校まで出向いて管理するのかというと、管理するためにSSHでリモート・ログインするのは現状危険なので、物理サーバまで出向いてLANから管理する方が安全だからだ。
　わたしが廊下を先導するように歩き、それにソフィーヤと真鳥が並んで続く。
　わたしは両肩を両手で抱くようにして寒さを堪え、ふとソフィーヤにたずねる。
「ソフィーヤ、モスクワと京都、どっちのほうが寒い？」
　ソフィーヤは小さな声で答える。
「体感では……京都の方が……寒いかも」
　真鳥が意外そうに声をあげる。
「ロシアって、日本より寒いのかと思ってました」
　ソフィーヤが答える。
「気温で測ると……モスクワのほうが寒いと思うけど……というのも……モスクワでは、雪はもうちょっと降るのと……道路は凍る……でも……京都は廊下に暖房がないから……屋内なのに寒い……」
　わたしはそういえばと思って言う。
「日本の家ってセントラル・ヒーティングがないわよね」
　真鳥がたずねてくる。
「セントラル・ヒーティング？」
「まあ、調べてみて」
　それから職員室のある校舎を離れて学生寮へ。
　わたしたちの部屋に戻り、電灯をつける。
　真鳥が部屋を見渡し、感嘆する。
「久しぶり。3日しか離れてないのに、なんだか、ついに戻ってきたって感じ」
　わたしは言う。
「とりあえず、わたしがキーボード使うから、ふたりは見ててね」
　わたしはさっそく机に座り、静電容量方式タッチキーボードを起動する。
　3人で来たけど、この部屋にキーボードはひとつしかないので、実際のところ、サーバをメンテできるのはひとりだけ。
　それから、左手の小指にはめた〈指輪〉を小指の指の腹で、〈眼鏡〉の右の蝶番を右手の人差し指と親指で、それぞれ抑えて、2秒間待つ。これは、〈指輪〉や〈眼鏡〉の接続する先を別の端末に変更するときにする操作だ。2秒後、眼鏡に物理サーバ上で動作する仮想マシンで動くOSの上で動くブラウザ上で動く端末エミュレータが表示される。試しに〈指輪〉を動かすと、端末エミュレータ上でマウスポインタが動く。いま、わたしの〈指輪〉と〈眼鏡〉がサーバに接続された。
　ソフィーヤと真鳥も、〈眼鏡〉と〈指輪〉をサーバに接続して、わたしの操作する端末を表示する。
　3人の〈指輪〉のポインタが、サーバ上で共有されて、わたしの〈眼鏡〉に表示される。このように、ディスプレイとポインタは共有できるけど、キーボードがひとつしかないので、実際に作業できるのはわたしひとりだ。
　したがって、ふたりはわたしの作業に注目して、必要ならアドバイスをしてくれるような形になる。
　見られてると、ちょっと恥ずかしい。
　わたしも、ソフィーヤほどではないにしろ、工学の分野に進路をとる女子だ。サーバのログがどこに保管されているのかくらいはわかる。
　まず、わたしはルータにログインし、ポート・フォワードの設定を変更して、SSHによるリモート・ログインをできなくする。ポートが開きっぱなしだと、またいつリモート・ログインされるか、わからない。
　そのあとsshサーバのログを確認する。sshサーバには、確かに一昨日から何度かログイン履歴があった。12月21日の昼頃のログイン履歴のグローバルIPアドレスは、たしかにわたしの電話帳に登録したソフィーヤのものと一致していて、つまりこの履歴はソフィーヤのものらしかった。
　そのあと、ソフィーヤは何度かログインしなおしている。でも、彼女のグローバルIPアドレスは、きっかり一昨日の分だけだ。
　それから、昨日、つまり12月22日の昼頃から、何者かのログイン履歴があった。IPアドレスはIPv4だ。いまだIPv4を使ってる人がいるのか……。IPv4からでは、たとえこのIPアドレスが本人のものであるとしても、個人の特定は不可能だろう。そして、おそらくこのIPアドレスは踏み台と呼ばれるものであり、このIPアドレスを調べることは、労力の無駄だとわたしは考える。
　また、そのIPv4アドレスは、ソフィーヤのアカウントを使っている。つまり、ソフィーヤの秘密鍵が盗まれているということだ。
　さすがにルートまでは盗られていない。ルートをとれなかったから、不届きものはログを消すことはできなかったみたいだ。
　今日のログイン履歴はないようだ。
　わたしはみんなに伝える。
「どうやら、ソフィーヤの秘密鍵を使って何者かがソフィーヤの〈マシン〉以外の端末からログインしたことは、まちがいないみたいね」
　真鳥が質問してくる。
「でも、犯人は、どうやってソフィーヤさんの秘密鍵を盗んだのでしょう」
　ソフィーヤがか細い声で答える。
「たぶん……最初のTCPセッション・ハイジャックで……犯人はサーバにログインした。それから~/.ssh/authorized\_keysというファイルをコピーした……これには、わたしの公開鍵が登録されている。そして、そのファイルを量子コンピュータで並列素因数分解し、公開鍵から秘密鍵を計算……このようにして、盗人は、わたしの〈マシン〉に直接侵入することなく……わたしの〈マシン〉にしかないはずの秘密鍵を盗んだのだと思う……」
　真鳥がきょどきょどと言う。
「ということは、不届きものはTCPセッション・ハイジャックをしたはずですね。ルータにハイジャックの痕跡がないか調べましょう」
　わたしは聞き返す。
「TCPパケットのログを調べるということ？」
「そうです」
「そんな……たしかにわたしたちのサーバのトラフィックは大したものじゃないけど——悲しいことにね！——でも、人力でできる量だと思う？」
「ACKパケットだけをフィルタすれば……」
　ソフィーヤが静かに言う。
「やってみてできなければ……諦めればいい……やってみずに諦めるのは……早計」
　たしかにそうだ。わたしは答える。
「わかったわ」
　調べようとしているのは、TCPセッション・ハイジャックの痕跡だ。
　TCPセッション・ハイジャックをする方法はいくつかあるけど、TCPにおいて代表的なものは、TCPシーケンス番号予測攻撃と呼ばれる方法だ。
　TCPセッションは、TCPパケットというものを送受信する。TCPパケットにはいくつか種類があるけど、そのすべては送信元のIPアドレスとシーケンス番号を保持している。
　パケットは、通信するデータを小さな単位に分割したものだけど、そのすべてが正しく通信できるとは限らない。たとえば、順番が入れ替わって届いたり、途中で情報が欠落することもあり得る。
　そこで、TCPパケットは、シーケンス番号というものを、メタ情報として持っている。シーケンス番号は、ある整数であり、TCPセッションが確立したときに適当な番号が振られ、そのあとは前のTCPパケットのシーケンス番号に1を足した整数が振られる。
　受信側は、TCPパケットを受け取ったあと、シーケンス番号でソートする。また、もしシーケンス番号が飛んでいたら、途中でパケットが失われてしまったということなので、送信側に再送依頼を送る。
　また、シーケンス番号が不正なパケットはすべて無視される。
　ところで、パケットに送信元のIPアドレスがくっついているけど、じつは、これは簡単に詐称できてしまうのだ。このIPアドレスが正しいかどうか確かめるすべは、受信側にはなく、送られてきたデータをそのまま信用するしかない。
　これらの事実を組み合わせると、面白い攻撃ができる。それがTCPシーケンス番号予測攻撃と呼ばれるものだ。
　まず、IPアドレスは簡単に詐称できることに注意して。
　それから、プロミスキャス・モードやARPキャッシュポイズニングなどの方法でネットワークをスニッフィングし、TCPパケットのシーケンス番号を調べる。
　ここで、攻撃者は、正規のデータ送信者が、あるシーケンス番号のTCPパケットを送る前に、そのシーケンス番号を予測し、そのシーケンス番号のTCPパケットを送信する。
　すると、受信者は、攻撃者のTCPパケットを受信した時点で、それが本物だと思い込んでシーケンス番号をインクリメントする。正規のデータ送信者の送ったはずのTCPパケットは、不正なシーケンス番号なので、無視される。
　このようにして、攻撃者は、不正なデータを本物だと思い込ませて送信することができる。
　通信というのは、パケットの送受信のことであるから、不正なデータを送信できてしまえば、もはや、そのTCPセッションは、乗っ取れたも同然だ。
　でも、そのためには、攻撃者は、TCPセッションを乗っ取るために、偽のTCPパケットを送信する必要がある。
　つまり、おそらくは、その偽のTCPパケットが、ログに残っているはずなのだ。
　でも、どのパケットが偽のTCPパケットであるかを判別するのは、難しい。
　ただ、よく使われるものはある。
　それは、ACKパケットと呼ばれるものだ。
　TCPパケットの種類には、次のようなものがある。
1) FINパケット
2) SYNパケット
3) RSTパケット
4) PSHパケット
5) ACKパケット
6) URGパケット
　このうちで、ACKパケットというものを使って、TCPセッション・ハイジャックをするのが、普通だ。
　そして、これらの種類は、TCPフラグというもので分別できる。そして、それはログに記録しているはず。
　TCPフラグは、ただの整数で、TCPフラグが
1) 1——2進数で000001——ならFINパケット、
2) 2——000010——ならSYNパケット、
3) 4——000100——ならRSTパケット、
4) 8——001000——ならPSHパケット、
5) 16——010000——ならACKパケット、
6) 32——100000——ならURGパケット
というようになっている。
　フラグの整数値はでたらめではなく、2進数にしたときの何桁めを1にするかどうかというようにして決まっている。
　これらのうちで、ACKパケットが、TCPシーケンス番号予測攻撃によく使われるパケットだ。
　つまり、TCPフラグ16であるようなパケットに絞り込んで検索すれば、見つかる可能性があるということ。
　わたしは、ACKパケットだけをフィルタして検索する。
　でも、TCPパケットのログは大量にある。
　いくらわたしたちのサーバのトラフィックが少ないと言っても、半端な量ではない。
　でも、検索条件によっては可能性はある。一昨日の昼頃のACKパケットにかぎれば、それほど多くはない。
　それから2時間ほど黙々と探す。ソフィーヤと真鳥は暇になってしまったからか、わたしを放ってベッドに横になりながら本を読んでいる。何度かソフィーヤや真鳥と交代した。3人で力を合わせて何万行もログを流し読み続けたとき、怪しいパケットを見つけた。
　同じシーケンス番号のACKパケットが、何度も繰り返し送られてきている。
　そして、そのほとんどは無視されていて、なおかつ、途中で一度だけ正常に処理されている。
　明らかにシーケンス番号予測攻撃の痕跡だ。
　真鳥が嬉しそうに言う。
「見つかりましたね」
「そうね。でもIPアドレスは詐称されたものよ」
「犯人を突き止める情報源にはならないけど、これは、おそらくハイジャックされたという予測ではなく、確実にハイジャックされたという証拠になります。これは、ソフィーヤさんが犯人なのではなくてただ利用されただけなのだという証拠ですよ」
　ソフィーヤが犯人ではない証拠。
　そう、じつは、いままでみんな口にはしなかったけど、その証拠はなかった。
　そもそも、いままでの情報では、次のような可能性もあったのだ。
　つまり、ソフィーヤが事件を起こした、という可能性が。
　そもそも、情報を簡単に整理すれば、
1) わたしたちのサーバに何者かがログインし、Facebook Searchを改竄し、
2) 一昨日、ソフィーヤはサーバにログインした
という事実があった。もし、第三者がこれを聞いたら、犯人はソフィーヤなのだと考えてると思う。でも、わたしたちは、そうであってはほしくないという思いから、ソフィーヤは真っ当な理由でログインし、それを不届きものがハイジャックしたことで事件が起こったと考えた。
　ハイジャックされたということは、つじつまを合わせるために必要な予想にすぎなかった。
　でも、いまは違う。その予想が、ログによって肯定された。つまり、ソフィーヤがハイジャックされたというのは、予想ではなく、事実なのだ。
　それが確信できただけでも、この2時間探したことはむだではなかったと思う。
　それが終わったのが午後10時。さすがにみんなくたくただった。
　キーボードを叩くのも疲れてきたので、わたしは真鳥にキーボードを交代する。
　真鳥が、そのほかに、サーバになにか手がかりが残っていないか調べる。
　真鳥がわたしたちにたずねてくる。
「冬休みに入ってから、みんな、ソフィーヤさん以外は、サーバにログインしていませんよね？」
　わたしはうなずく。リモート・ログインは禁止されている以上、冬休みにログインするはずがない。
　真鳥はソフィーヤにたずねる。
「ソフィーヤさんは、サーバ上でなにかファイルを消除しました？」
　ソフィーヤは首を振る。
「なにも……消してないはず」
「おっけー。つまり、冬休みに入った12月21日の昼よりあとに消除されたファイルは、すべて侵入者が消除したものだと言えますよね」
　わたしは理解して先に言う。
「復元するのね、消除されたファイルを」
「そう。rmコマンドは、ディスクからファイルを消すわけではなくて、ファイルへのポインタを消すだけ。すなわち、そのポインタを見つけだせばファイルを復元できる。もちろん、その場所に新たなデータが書き込まれたり、0で埋められたりしたら消えてしまうけど。運がよければ、侵入者が消したファイルが復元できるはず」
　ソフィーヤが言う。
「侵入者が消したファイルには……なにか証拠が残っている可能性があるということね」
　わたしはほめる。
「真鳥、あったまいい！」
　真鳥はファイル復元コマンドを実行する。わたしは、もし大量に消除されていたら時間がかかるし、ひょっとしたら寝れなくなるなるんじゃないかなんて思ったけど、そんなことはなかった。大した量は消除されていなかったらしく、コマンドは数秒で完了した。
　ディレクトリに消除されたファイルがすべて復元される。わたしは期待を感じて思わずつぶやく。
「これが消除されたファイルの一覧ね」
　怪しいファイルがないか、真鳥が探す。すると、なにやら怪しいファイルが発見される。
　シェルスクリプト。そのファイルを開いてみると、どうやら犯人が犯行の際に使ったらしいコマンドや関数が記されている。
　その内容を見たとき、みんな、かなり犯人に近づいたと確信した。というのも、変数にIPアドレスが記述されており、そのIPアドレスからマルウェアをダウンロードするらしいコードが書かれていた。このIPアドレスをたどれば、犯人に近づける可能性がある。
　どうやら、このシェルスクリプトは、起動されると、そのIPアドレスからマルウェアをダウンロードし、わたしたちのサーバでホスティングしたうえで、バックグラウンドで常駐し、起動されているあいだずっとFacebook Searchを改竄し、マルウェアへのリンクを忍ばせ、また、1日ほど経った頃に自動的にプロセスを終了してこのシェルスクリプト自体や関連するファイルをすべて消除するという一連の処理を担っているようだ。
　でも、犯人はちょっと間抜けで、rmしたファイルが即座に消えるわけではないということを知らなかったみたいだ。
　わたしは真鳥に命令する。
「ちょっとそのIPアドレスにpingを打ってみてくれないかしら」
　ソフィーヤが口を挟む。
「こちらが調査しているとあちらに知られたら……対策される可能性がある……ここは一度先生に報告すべきでは……」
　真鳥が反論する。
「でも、わたしたちはすでに侵入されているんですよ。もし、pingを打っただけで調査していることがばれるほどセキュリティを講じているのなら、こちらのサーバであらかじめ監視プログラムを走らせておくと思います——たとえば、だれかがログインしたら所定のサーバにpingを打つようなプログラムを——だから、その懸念はむだだと思います」
　ソフィーヤがちょっと考えてうなずく。
「たしかに……あなたは正しい」
　わたしは許可を下す。
「わたしが許可するわ。そのIPアドレスを調べましょう」
　真鳥はpingコマンドをそのIPアドレスに向かって打つ。
　すると、レスポンスが帰ってくる。
　このIPアドレスは、生きている。
　つまり、犯人へ繋がっている可能性がある。
　わたしは命令する。
「シェルスクリプトのリンクに書かれたマルウェアをダウンロードしましょう。サンプルとして保存しておいて、あとで仮想環境で検証するのよ」
　真鳥がwgetコマンドでマルウェアをダウンロードする。
　リンクは生きてた。マルウェアがダウンロードされて保存される。
　ダウンロードしただけでは危険はない。危険なのは、それを実行してしまったとき。
　真鳥が楽しそうに言う。彼女は、犯人を捕まえるということ以前に、この事件を楽しんでいるみたいだ。
「whoisしてみましょう」
　whoisというのは、IPアドレスの所有者を調べるコマンド。
　とはいえ、データベースに登録されていなければわからないし、そもそも偽装されていることも多い。
　真鳥がwhoisでIPアドレスを調べる。
　コンソールにNo matchと表示される。
　どうやらデータベースに登録されていないらしい。
　ソフィーヤがなぜか安心したように胸を撫で下ろして言う。
「残念……」
　シェルスクリプトから得られる手がかりも、もうないようだし。
　マルウェアは放っておいても消えはしない。それを調査するのは、後回しでもよさそうだ。
　わたしは提案する。
「そのIPアドレスをポート・スキャンしてみましょう。もしかしたら穴が空いてるかも」
　ポート・スキャンというのは、待ち受け状態にあり、コネクション確立要求を受け付けているポートを見つけ出すための方法。
　ポート・スキャンで見つけたポートは、開放されている。
　開放されているポートは、うまくすれば乗っ取ることができる可能性がある。それができれば、こちらからそのIPアドレスにログインし、さらに調査できる可能性が。
　ソフィーヤが静かに言う。
「するなら……ハーフ・オープン・スキャンを……」
　ハーフ・オープン・スキャンというのは、ステルス型のポート・スキャンのことで、TCPコネクションを確立せずにポート・スキャンできるので、TCPコネクションを記録するツールではログに残らないなどの特徴がある。
　真鳥が目をうろうろさせる。
「でも、わたし、C言語書けませんよ」
　ハーフ・オープン・スキャンをするのには、専用のプログラムを書く必要があるのだけど、それを書くのにC言語を使う必要があり、真鳥は書けないらしいのだ。
　というのも、わたしたち3人はみんな、Standard MLまたはその方言を使い、C言語のようなプログラミング言語にはうとい。
　ソフィーヤが冷静に言う。
「C言語をどう使うのか知らないけど……ちゃんとハーフ・オープン・スキャンしないと……telnetとかでスキャンしてもいいけど……DoS攻撃と間違われて——もっとも、ポート・スキャンはほとんどDoS攻撃だし——フィルタされるかも」
　正直、わたしもC言語をうまく使える自信はない。
　できるとすれば、ソフィーヤだけだ。
　わたしはソフィーヤにお願いする。
「ソフィーヤ、あなたは7つの言語を使えるでしょう。C言語も、たぶんできるのよね？　プログラミングしてみてくれないかしら」
　ソフィーヤはむすっとした顔をすると、黙って真鳥の隣りまで行き、キーボードを交代する。
　ソフィーヤは小さな声で言う。
「C言語を書く必要はない……というのも……nmapを使えばいいから」
　真鳥がきょとんとして質問する。
「nmap？」
「そういう……ポート・スキャンをするソフトウェアがある……知らないのも……無理はないと思うけど」
　正直、わたしもハーフ・オープン・スキャンというのをどうやるのか知らなくて、真鳥がそう言ったからてっきりC言語で書く必要があるのかと思ったけど、ソフィーヤによれば専用のツールがあるみたい。
　ソフィーヤがnmapを使用してポート・スキャンを実施する。
　ポート・スキャンに時間がかかる。端末がのろのろと更新される。
　これは、nmapが遅いのではなくて、たぶんサーバが遅いのだろう。
　わたしはいらいらしてつぶやく。
「やけに遅いサーバね……」
　しばらくしてポート・スキャンが完了する。
　なんと、22番ポートや80番ポートが空いていた。
　つまり、SSHやHTTPがむき出しの状態になっているということだ。
　わたしは大声で言う。
「22番ポートが空いてる！　SSHが提供されているということよ。うまくやれば、ログインできるかもしれないわ」
　HTTPはともかく、この時代にSSHは危険だ。
　逆に言うと、これはチャンスでもある。
　うまく暗号を解読すれば、SSHで犯人のサーバにログインできる可能性がある。
　真鳥が興奮しながら言う。彼女はたいへん楽しそうだ。
「犯人にされたことを、今度はこっちが仕返す版ですね！　サーバが稼働していて、SSHが動いているということは、きっと、近いうちに犯人はSSHでそのサーバにリモート・ログインしますよ——そうでないと、ポートを開放している意味がありませんよ——そうですよ。そうにちがいありません！　こちらもプログラムを常駐させて、TCPセッション・ハイジャックを試みましょう」
　なるほど。たしかに、それは良い手かもしれない。
　ソフィーヤが計画の問題を指摘する。
「でも、そのためには、公開鍵から秘密鍵を計算できる量子コンピュータが必要……というのも……わたしたちのサーバは256ビットCPUと16TBメモリを備えているけど……このスペックの古典コンピュータだと何億年かかるか……」
　わたしは疑問を口にする。
「でも、わたしたちのサーバにも量子プロセッサはついてるでしょ？」
「あるけど……コア数やクロック数が足りないと思う」
「でも試してみればできるかも」
「べつに試してもいいけど……わたしは……たぶんできないと思う……あと……そもそもの問題として……TCPセッション・ハイジャックするプログラム、書ける、ふたりとも……？」
　真鳥はぶんぶん顔を横に振る。わたしも首を振る。
　真鳥が質問する。
「じゃあ、どうすれば？」
「地道に……さっきダウンロードしたマルウェアの検証をするのが確実だと思う……」
　たしかに、それが確実だ。わたしは結論を下す。
「じゃあ、そうしましょう」
　時計を見ると、あと15分もすれば12時を回る時間になっていた。
　真鳥が急に目をうっとりとさせ、目をこすって言う。
「今日は……さすかに、もう眠いですね。仮想環境の構築とマルウェアの検証には、時間がかかるでしょうし、もう寝ましょう」
　わたしは答える。
「そうね」
　ソフィーヤも答える。
「賛成」
　わたしたちは、今日は寝ることにして、ベッドに潜り込む。
　わたしとソフィーヤは、まだ終電に間に合う可能性もあるけど、真鳥はほとんど間に合わない。真鳥だけ置いてきぼりにするのもかわいそうだし、3人でひとつのベッドに入る。
　わたしの背が小さいので、わたしが真ん中で、ソフィーヤと真鳥がわたしを囲む。
　ベッドはレースのカーテンで装飾されている。
　枕元のスクリーンを触ると、静電気が発生して電気が消える。
　月が明るく、電気を消しても、お互いの顔がくっきり見えた。
　わたしたちは目を閉じて眠ろうと試みる。
　だれかひとりでも夜更かししてるとつい釣られてみんな夜更かししてしまうので、一緒に寝るときは、物音を建てないようにする。
　しんと静まり返る。
　そろそろ15分くらい経ったかな。
　12時は過ぎたかも。
　でも、わたしはなんだか眠れなくて、目を開ける。
　わたしの目の前にソフィーヤの背中が現れる。
　ちょっと大きめのパジャマを着ているからか、はだけて肩が見える。
　透き通った白い肌。
　暗い場所だと、その白さがさらに際立って、青白くも見えた。
　きれいな肌だ。
　わたしはちょっとどきりとしてしまう。
　それから、わたしはその肩がふるふると震えるように動いていることに気づく。
　彼女の顔のあたりが、ぼんやりと明るい。
　どうやらディスプレイがついていて、彼女はなにか見ているみたいだ。
　起きてる。
　わたしは声をかける。
「ソフィーヤ、起きてるの……？」
　ソフィーヤは細い声で答える。
「うん……」
「なにしてるの？」
「ちょっと……論文を……書いてる……」
「論文？」
「うん……今度……投稿するんだけど……“あること”について……」
　わたしは興味を持ってたずねる。
　親友のことなら、なんだって知りたい。
「“あること”って？」
「それは……」ソフィーヤは身を翻し、くるりとこちらを向く。彼女は真鳥をちょっと見てから言う。「うん……真鳥は寝てるみたいだし……アリスになら……言ってもいいかも……」
「教えて。興味ある」
「GGH暗号——格子暗号のひとつ——について。GGH暗号というのは……噛み砕いて説明すると……格子というのは、n個のm次元ベクトル——ただし、nはm以下——の整数結合の集合のことで……nがじゅうぶんに大きいと……格子の最短ベクトル問題がNP困難になることを根拠としている暗号で……」
「ちょっと待って」
「うん」
　わたしは一度深呼吸する。
「続けて」
「……まあ……つまり……その格子の最短ベクトル問題を量子コンピュータで解く驚くべきアルゴリズムを、わたしは見つけたんだけど……ちょっと……いま話すには、時間が足りないね……」
「なるほど」
　わかってないけど。わたしは復唱して確認する。
「つまりその、ソフィーヤはGGH暗号を解読できちゃったわけね？」
　と、自分で言ってことの重大さを理解する。
　GGH暗号というのは、たしかFacebook Searchの暗号化にも使われていた暗号だ。
　そして、今日の午後、そのFacebook Searchの暗号が解読されてページが改竄された。
　このことから考えられるのって、つまり、ひょっとして……。
　わたしは考えたくないことを考えてしまって、頭をぶんぶん振って振り払う。
　忘れよう。
　たとえそうだったとしても、なにか理由があってのことだろう。
　それに、偶然かもしれない。
　それに、もしそうだとして、わたしが黙っていれば、問題は起こらないはず。
　そう、きっとそうだ。
　わたしはソフィーヤに言う。
「おやすみ、今日は寝るね」
　そう言って、わたしは彼女に背中を向ける。
　忘れよう。
　そう思って目をつむろうとしたとき、眼鏡にメールの着信が通知される。
　わたしはメールの差出人を見て、ぎょっとする。
　真鳥からだ。
　わたしは困惑する。わたしの目の前で寝ているはずの真鳥から、どうしてメールが。
　そう思った直後、大量のメールが通知される。
　いろんな友達から同じタイトルのメールが何通も届く。
　2通や3通ではなく、2桁、そして3桁だ。
　明らかにただ事ではない。
　わたしは胸をどきどきさせながらメールを開く。
“わたしは格子の最短ベクトル問題を量子コンピュータでO(log n)で解くアルゴリズムを発明した. その証拠として, 2045年12月23日の昼, GGH暗号で暗号化されたFacebook SearchというウェブサイトのTCPパケットを改竄し, 2014年12月24日午前零時をもって, このメールを一斉送信するソフトウェアを, 同サイトから散布した. 図1.1は, 改竄された同サイトのスクリーンショットである. わたしの目的は, アルゴリズムの存在と, その危険性を世界に知らせることである. なお, アルゴリズムの詳細については, 現在まとめているところで, 匿名で, 近日公開予定である. 乞うご期待.”
* Results
* Discussion
* Conclusion
